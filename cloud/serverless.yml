service: ${env:SERVICE_NAME}

frameworkVersion: "2"
useDotenv: true

plugins:
  - serverless-apigw-binary
  - serverless-plugin-aws-alerts

provider:
  name: aws
  runtime: python3.8
  stage: ${env:STAGE}
  region: ${env:REGION}
  profile: ${env:PROFILE}
  environment:
    RECORDS_BUCKET_NAME1: ${env:RECORDS_BUCKET_NAME1}
    RECORDS_BUCKET_NAME2: ${env:RECORDS_BUCKET_NAME2}
    TRANSCRIBE_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-transcribe-bucket
    COMPREHEND_BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-comprehend-bucket
    COMPLETE_SNS_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-complete-topic
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221
  logRetentionInDays: 90
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "arn:aws:s3:::${env:RECORDS_BUCKET_NAME1}/*"
            - "arn:aws:s3:::${env:RECORDS_BUCKET_NAME2}/*"
            - "arn:aws:s3:::${self:provider.environment.TRANSCRIBE_BUCKET_NAME}/*"
            - "arn:aws:s3:::${self:provider.environment.COMPREHEND_BUCKET_NAME}/*"
        - Effect: Allow
          Action:
            - transcribe:StartTranscriptionJob
          Resource: "*"
        - Effect: Allow
          Action:
            - "comprehend:*"
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - "SNS:Publish"
          Resource:
            Fn::Join:
              - ":"
              - - "arn:aws:sns"
                - "Ref": "AWS::Region"
                - "Ref": "AWS::AccountId"
                - ${self:provider.environment.COMPLETE_SNS_TOPIC}

custom:
  apigwBinary:
    types:
      - "*/*"
  alerts:
    topics:
      alarm:
        topic: ${self:service}-${opt:stage, self:provider.stage}-alerts-alarm
        nameTemplate: $[functionName]-$[metricName]-Alarm
        prefixTemplate: $[stackName]
        notifications:
          - protocol: ${env:SNS_ALARM_PROTOCOL}
            endpoint: ${env:SNS_ALARM_ENDPOINT}
    alarms:
      - functionErrors
      - functionThrottles
  authorizer:
    name: authorization
    type: REQUEST
    identitySource: method.request.header.Authorization
    resultTtlInSeconds: 0

package:
  include:
    - "src/*"
  exclude:
    - node_modules/**
    - "*.sh"
    - "*.dio"
    - "*.json"

functions:
  transcribe1:
    name: ${self:service}-${opt:stage, self:provider.stage}-transcribe1
    handler: src/transcribe.handler
    memorySize: 512
    environment:
      MINIMUM_RECORDS_SIZE: ${env:MINIMUM_RECORDS_SIZE}
    events:
      - s3:
          bucket: ${env:RECORDS_BUCKET_NAME1}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .wav
  transcribe2:
    name: ${self:service}-${opt:stage, self:provider.stage}-transcribe2
    handler: src/transcribe.handler
    memorySize: 512
    environment:
      MINIMUM_RECORDS_SIZE: ${env:MINIMUM_RECORDS_SIZE}
    events:
      - s3:
          bucket: ${env:RECORDS_BUCKET_NAME2}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .wav
  comprehend:
    name: ${self:service}-${opt:stage, self:provider.stage}-comprehend
    handler: src/comprehend.handler
    memorySize: 512
    environment:
      SNS_TOPIC_ARN:
        Fn::Join:
          - ":"
          - - "arn:aws:sns"
            - "Ref": "AWS::Region"
            - "Ref": "AWS::AccountId"
            - ${self:provider.environment.COMPLETE_SNS_TOPIC}
    events:
      - s3:
          bucket: ${self:provider.environment.TRANSCRIBE_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: -transcribe.json
  cdr:
    name: ${self:service}-${opt:stage, self:provider.stage}-cdr
    handler: src/cdr.get
    memorySize: 512
    environment:
      RDS_ENDPOINT: ${env:RDS_ENDPOINT}
      RDS_USER_NAME: ${env:RDS_USER_NAME}
      RDS_USER_PASS: ${env:RDS_USER_PASS}
      RDS_DB_NAME: ${env:RDS_DB_NAME}
    vpc:
      securityGroupIds:
        - ${env:VPC_SECURITY_GROUP_ID}
      subnetIds:
        - ${env:PRIVATE_SUBNET_ID}
    events:
      - http:
          path: cdr/{records_bucket}/{proxy+}
          method: get
          authorizer: ${self:custom.authorizer}
  records:
    name: ${self:service}-${opt:stage, self:provider.stage}-records
    handler: src/records.get
    memorySize: 512
    events:
      - http:
          path: records/{records_bucket}/{proxy+}
          method: get
          authorizer: ${self:custom.authorizer}
  results:
    name: ${self:service}-${opt:stage, self:provider.stage}-results
    handler: src/results.get
    memorySize: 512
    events:
      - http:
          path: results/{records_bucket}/{proxy+}
          method: get
          authorizer: ${self:custom.authorizer}
  authorization:
    name: ${self:service}-${opt:stage, self:provider.stage}-authorization
    handler: src/auth.authorization
    environment:
      RDS_ENDPOINT: ${env:RDS_ENDPOINT}
      RDS_USER_NAME: ${env:RDS_USER_NAME}
      RDS_USER_PASS: ${env:RDS_USER_PASS}
      RDS_DB_NAME: ${env:RDS_DB_NAME}
    vpc:
      securityGroupIds:
        - ${env:VPC_SECURITY_GROUP_ID}
      subnetIds:
        - ${env:PRIVATE_SUBNET_ID}

resources:
  Resources:
    S3ComprehendBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.COMPREHEND_BUCKET_NAME}
    CompeleteSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.COMPLETE_SNS_TOPIC}
        Subscription:
          - Protocol: ${env:SNS_COMPLETE_PROTOCOL}
            Endpoint: ${env:SNS_COMPLETE_ENDPOINT}
